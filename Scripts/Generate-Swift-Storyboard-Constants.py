#!/usr/bin/env python

import sys, os
import xml.etree.ElementTree as et

PREFIX = ""

segueIdentifiers = {}
controllerIdentifiers = {}
reuseIdentifiers = {}

def addIdentifierToArray(identifier, array):
	key = identifier[0].upper() + identifier[1:]
	if not key.startswith(PREFIX):
		key = PREFIX + key
	
	array[key] = identifier

def process_storyboard(file):
    tree = et.parse(file)
    root = tree.getroot()
    
    for segue in root.iter("segue"):
        segueIdentifier = segue.get("identifier")
        if segueIdentifier == None:
            continue
        addIdentifierToArray(segueIdentifier, segueIdentifiers)
    
    for controller in root.findall(".//*[@storyboardIdentifier]"):
        controllerIdentifier = controller.get("storyboardIdentifier")
        if controllerIdentifier == None:
            continue
        addIdentifierToArray(controllerIdentifier, controllerIdentifiers)

    for cell in root.findall(".//*[@reuseIdentifier]"):
      reuseIdentifier = cell.get("reuseIdentifier")
      if reuseIdentifier == None:
        continue
      addIdentifierToArray(reuseIdentifier, reuseIdentifiers)

def writeConstantFile(file, identifiers):
    constants = sorted(identifiers.keys())
    
    for constantName in constants:
        file.write("\t\tstatic let " + constantName + " = \"" + identifiers[constantName] + "\"\n")

count = os.environ["SCRIPT_INPUT_FILE_COUNT"]
for n in range(int(count)):
    process_storyboard(os.environ["SCRIPT_INPUT_FILE_" + str(n)])

with open(sys.argv[1], "w+") as constantFile:
    constantFile.write("/* Generated by 'Generate-Swift-Storyboard-Constants.py' DO NOT CHANGE */\n\n")
    constantFile.write("import Foundation\n\n")
    
    constantFile.write("struct Constants {\n\n")
    
    constantFile.write("\tstruct Segue {\n")
    writeConstantFile(constantFile, segueIdentifiers)
    constantFile.write("\t}")
    
    constantFile.write("\n\n")
    constantFile.write("\tstruct ViewController {\n")
    writeConstantFile(constantFile, controllerIdentifiers)
    constantFile.write("\t}")
    
    constantFile.write("\n\n")
    constantFile.write("\tstruct ReuseCell {\n")
    writeConstantFile(constantFile, reuseIdentifiers)
    constantFile.write("\t}")
    
    constantFile.write("\n\n")
    constantFile.write("}")
    
    constantFile.close()

